def calculate_check_bytes(data):
    # Split the data into groups of 8 bits (1 byte each)
    bytes_data = [data[i:i+4] for i in range(0, len(data) - 8, 4)]

    print(bytes_data)
    
    # Convert each byte to an integer
    int_bytes = [int(byte, 2) for byte in bytes_data]
    
    # Perform XOR on all bytes
    check_byte = 0
    for byte in int_bytes:
        check_byte += byte

    check_byte = check_byte % 16
    check_byte ^= 15
    
    # Convert check byte to a 4-bit binary string
    check_bits = bin(check_byte & 0x0F)[2:].zfill(4)
    
    return check_bits

# Example usage
data = ['11100000000000000000000000000001',
'11100011000000000000000000001110',
'11100100000000000000000000001101',
'11100110000000000000000000001011',
'11101000000000000000000000001001',
'11101010000000000000000000000111',
'11101100000000000000000000000101',
'11101101000000000000000000000100',
'11101111000000000000000000000010',
'11110001000000000000000000001111',
'11110011000000000000000000001101',
'11110100000000000000000000001100',
'11110110000000000000000000001010',
'11111000000000000000000000001000',
'11111010000000000000000000000110',
'11111100000000000000000000000100',
'11111110000000000000000000000010',
'11100000000000001000000000001001',
'11100011000000001000000000000110',
'11100100000000001000000000000101',
'11100110000000001000000000000011',
'11101000000000001000000000000001',
'11101010000000001000000000001111',
'11101100000000001000000000001101',
'11101101000000001000000000001100',
'11101111000000001000000000001010',
'11110001000000001000000000000111',
'11110011000000001000000000000101',
'11110100000000001000000000000100',
'11110110000000001000000000000010',
'11111000000000001000000000000000',
'11111010000000001000000000001110',
'11111100000000001000000000001100',
'11111110000000001000000000001010',
'10001011001000000000000000001010',
'10101011001000000000000000001000',
'11001011001000000000000000000110',
'10001011001000001000000000000010',
'10101011001000001000000000000000',
'11001011001000001000000000001110',
'10001011010000000000000000001000',
'10101011010000000000000000000110',
'11001011010000000000000000000100',
'10001011010000001000000000000000',
'10101011010000001000000000001110',
'11001011010000001000000000001100',
'11101011100000000000000000001110',
'11101011100000001000000000000110',
'01101011100000000000000000000110',
'11101011100111000000000000000001',
'11101011100110110000000000000010',
'11101011100110100000000000000011',
'11101011100110010000000000000100',
'11101011100110000000000000000101',
'11101011100101110000000000000110',
'11101011100101100000000000000111',
'11101011100101010000000000001000',
'11101011100101000000000000001001',
'11101011100100110000000000001010',
'11101011100100100000000000001011',
'11101011100100010000000000001100',
'11100000000000000010000000001111',
'11100001000000000010000000001110',
'11100010000000000010000000001101']


for d in data:
    check_bits = calculate_check_bytes(d)
    if(check_bits == d[28:]):
        print("OK -", end="")
    else:
        print("NO -", end="")
    print(f"Calculated: {check_bits} real: {d[28:]}")